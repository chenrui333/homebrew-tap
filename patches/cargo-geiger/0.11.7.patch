From 90545f84278632d2d02d1d1edba2e402f489d1ea Mon Sep 17 00:00:00 2001
From: Rui Chen <rui@chenrui.dev>
Date: Sat, 8 Feb 2025 11:22:48 -0500
Subject: [PATCH 1/3] chore(deps): update time crate to build with rust 1.80+

Signed-off-by: Rui Chen <rui@chenrui.dev>
---
 Cargo.lock | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 48c5606..8ac9448 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1,6 +1,6 @@
 # This file is automatically @generated by Cargo.
 # It is not intended for manual editing.
-version = 3
+version = 4
 
 [[package]]
 name = "addr2line"
@@ -2238,6 +2238,12 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "num-conv"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9"
+
 [[package]]
 name = "num-traits"
 version = "0.2.17"
@@ -3148,13 +3154,14 @@ dependencies = [
 
 [[package]]
 name = "time"
-version = "0.3.30"
+version = "0.3.37"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4a34ab300f2dee6e562c10a046fc05e358b29f9bf92277f30c3c8d82275f6f5"
+checksum = "35e7868883861bd0e56d9ac6efcaaca0d6d5d82a2a7ec8209ff492c07cf37b21"
 dependencies = [
  "deranged",
  "itoa",
  "libc",
+ "num-conv",
  "num_threads",
  "powerfmt",
  "serde",
@@ -3170,10 +3177,11 @@ checksum = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3"
 
 [[package]]
 name = "time-macros"
-version = "0.2.15"
+version = "0.2.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4ad70d68dba9e1f8aceda7aa6711965dfec1cac869f311a51bd08b3a2ccbce20"
+checksum = "2834e6017e3e5e4b9834939793b282bc03b37a3336245fa820e35e233e2a85de"
 dependencies = [
+ "num-conv",
  "time-core",
 ]
 
-- 
2.48.1


From 31047724159d1e7aa46a556497c6dd7317aaf8bb Mon Sep 17 00:00:00 2001
From: Rui Chen <rui@chenrui.dev>
Date: Sat, 8 Feb 2025 11:23:31 -0500
Subject: [PATCH 2/3] chore: run clippy fix

Signed-off-by: Rui Chen <rui@chenrui.dev>
---
 cargo-geiger/src/args.rs                           |  7 ++-----
 cargo-geiger/src/format.rs                         |  7 ++-----
 cargo-geiger/src/format/display.rs                 |  2 +-
 cargo-geiger/src/format/print_config.rs            |  7 ++-----
 cargo-geiger/src/scan.rs                           | 10 ++++------
 cargo-geiger/src/scan/find.rs                      |  6 +++---
 cargo-geiger/src/scan/rs_file.rs                   | 10 +++++-----
 cargo-geiger/src/tree/traversal/dependency_node.rs |  4 ++--
 8 files changed, 21 insertions(+), 32 deletions(-)

diff --git a/cargo-geiger/src/args.rs b/cargo-geiger/src/args.rs
index 5709e81..c30350b 100644
--- a/cargo-geiger/src/args.rs
+++ b/cargo-geiger/src/args.rs
@@ -242,17 +242,14 @@ pub struct ReadmeArgs {
 }
 
 #[derive(Debug, Eq, PartialEq)]
+#[derive(Default)]
 pub enum Verbosity {
+    #[default]
     Verbose,
     Normal,
     Quiet,
 }
 
-impl Default for Verbosity {
-    fn default() -> Self {
-        Verbose
-    }
-}
 
 fn parse_features(raw_features: Option<String>) -> Vec<String> {
     raw_features
diff --git a/cargo-geiger/src/format.rs b/cargo-geiger/src/format.rs
index c35f486..8e5128c 100644
--- a/cargo-geiger/src/format.rs
+++ b/cargo-geiger/src/format.rs
@@ -12,17 +12,14 @@ use std::str::{self, FromStr};
 use strum_macros::EnumIter;
 
 #[derive(Clone, Copy, Debug, Eq, PartialEq)]
+#[derive(Default)]
 pub enum Charset {
+    #[default]
     Ascii,
     GitHubMarkdown,
     Utf8,
 }
 
-impl Default for Charset {
-    fn default() -> Self {
-        Charset::Ascii
-    }
-}
 
 #[derive(Debug, Eq, PartialEq)]
 pub enum Chunk {
diff --git a/cargo-geiger/src/format/display.rs b/cargo-geiger/src/format/display.rs
index acf51d7..eb5d35a 100644
--- a/cargo-geiger/src/format/display.rs
+++ b/cargo-geiger/src/format/display.rs
@@ -11,7 +11,7 @@ pub struct Display<'a> {
     pub package: &'a PackageId,
 }
 
-impl<'a> fmt::Display for Display<'a> {
+impl fmt::Display for Display<'_> {
     // This clippy recommendation is quite strict, not allowing an error message
     // to be written out when failing to format the struct.
     // Perhaps we shouldn't be using `impl fmt::Display` at all, and instead
diff --git a/cargo-geiger/src/format/print_config.rs b/cargo-geiger/src/format/print_config.rs
index ca9196c..05a8ca4 100644
--- a/cargo-geiger/src/format/print_config.rs
+++ b/cargo-geiger/src/format/print_config.rs
@@ -16,19 +16,16 @@ pub enum Prefix {
 }
 
 #[derive(Clone, Copy, Debug, EnumString, Eq, PartialEq)]
+#[derive(Default)]
 pub enum OutputFormat {
     Ascii,
     Json,
     GitHubMarkdown,
     Ratio,
+    #[default]
     Utf8,
 }
 
-impl Default for OutputFormat {
-    fn default() -> Self {
-        OutputFormat::Utf8
-    }
-}
 
 #[derive(Debug, Eq, PartialEq)]
 pub struct PrintConfig {
diff --git a/cargo-geiger/src/scan.rs b/cargo-geiger/src/scan.rs
index b9770d7..bd7a518 100644
--- a/cargo-geiger/src/scan.rs
+++ b/cargo-geiger/src/scan.rs
@@ -183,12 +183,10 @@ fn list_files_used_but_not_scanned(
         .collect::<HashSet<&PathBuf>>();
 
     rs_files_used
-        .iter()
-        .cloned()
-        .filter(|p| {
+        .iter().filter(|&p| {
             !scanned_files.contains(p)
                 && !geiger_context.ignored_paths.contains(p)
-        })
+        }).cloned()
         .collect()
 }
 
@@ -357,7 +355,7 @@ mod scan_tests {
             &mut visited,
         );
 
-        assert_eq!(visited, vec![dependency_index].iter().cloned().collect());
+        assert_eq!(visited, [dependency_index].iter().cloned().collect());
         assert_eq!(
             package_info.dependencies.len(),
             expected_package_info_dependency_length
@@ -446,7 +444,7 @@ mod scan_tests {
             input_rs_path_to_metrics_vec.iter().cloned().collect();
 
         let geiger_context = GeigerContext {
-            package_id_to_metrics: vec![(
+            package_id_to_metrics: [(
                 package_id,
                 PackageMetrics { rs_path_to_metrics },
             )]
diff --git a/cargo-geiger/src/scan/find.rs b/cargo-geiger/src/scan/find.rs
index 2bf7b38..9ece79e 100644
--- a/cargo-geiger/src/scan/find.rs
+++ b/cargo-geiger/src/scan/find.rs
@@ -2,7 +2,7 @@ use crate::format::print_config::PrintConfig;
 use crate::mapping::{CargoMetadataParameters, GetPackageRoot};
 use crate::scan::rs_file::{
     into_is_entry_point_and_path_buf, into_rs_code_file, into_target_kind,
-    is_file_with_ext, RsFile, RsFileMetricsWrapper,
+    is_file_with_ext, RsFile,
 };
 use crate::scan::PackageMetrics;
 
@@ -238,11 +238,11 @@ fn update_package_id_to_metrics_with_rs_file_metrics(
 ) {
     let package_metrics = package_id_to_metrics
         .entry(package_id)
-        .or_insert_with(PackageMetrics::default);
+        .or_default();
     let wrapper = package_metrics
         .rs_path_to_metrics
         .entry(path_buf)
-        .or_insert_with(RsFileMetricsWrapper::default);
+        .or_default();
     wrapper.metrics = rs_file_metrics;
     wrapper.is_crate_entry_point = is_entry_point;
 }
diff --git a/cargo-geiger/src/scan/rs_file.rs b/cargo-geiger/src/scan/rs_file.rs
index 4fc27fc..9316fde 100644
--- a/cargo-geiger/src/scan/rs_file.rs
+++ b/cargo-geiger/src/scan/rs_file.rs
@@ -42,7 +42,7 @@ pub struct RsFileMetricsWrapper {
     /// The information returned by the `geiger` crate for a `.rs` file.
     pub metrics: RsFileMetrics,
 
-    /// All crate entry points must declare forbid(unsafe_code) to make it count
+    /// All crate entry points must declare `forbid(unsafe_code)` to make it count
     /// for the crate as a whole. The `geiger` crate is decoupled from `cargo`
     /// and cannot know if a file is a crate entry point or not, so we add this
     /// information here.
@@ -55,7 +55,7 @@ pub enum RsResolveError {
     /// cargo-geiger about how the cargo API works.
     ArcUnwrap(),
 
-    /// Would like cargo::Error here, but it's private, why?
+    /// Would like `cargo::Error` here, but it's private, why?
     /// This is still way better than a panic though.
     Cargo(String),
 
@@ -65,7 +65,7 @@ pub enum RsResolveError {
     /// Failed to get the inner context out of the mutex.
     InnerContextMutex(String),
 
-    /// Like io::Error but with the related path.
+    /// Like `io::Error` but with the related path.
     Io(io::Error, PathBuf),
 
     Walkdir(walkdir::Error),
@@ -423,7 +423,7 @@ mod rs_file_tests {
         let config = Config::default().unwrap();
         let cwd = config.cwd();
 
-        let walk_dir_rust_files = WalkDir::new(&cwd)
+        let walk_dir_rust_files = WalkDir::new(cwd)
             .into_iter()
             .filter_map(|e| e.ok())
             .filter(|e| e.path().to_str().unwrap().ends_with(".rs"));
@@ -432,7 +432,7 @@ mod rs_file_tests {
             assert!(is_file_with_ext(&entry, "rs"));
         }
 
-        let walk_dir_readme_files = WalkDir::new(&cwd)
+        let walk_dir_readme_files = WalkDir::new(cwd)
             .into_iter()
             .filter_map(|e| e.ok())
             .filter(|e| e.path().to_str().unwrap().contains("README"));
diff --git a/cargo-geiger/src/tree/traversal/dependency_node.rs b/cargo-geiger/src/tree/traversal/dependency_node.rs
index 579499c..c64c377 100644
--- a/cargo-geiger/src/tree/traversal/dependency_node.rs
+++ b/cargo-geiger/src/tree/traversal/dependency_node.rs
@@ -55,8 +55,8 @@ pub fn walk_dependency_node(
     all_out_text_tree_lines
 }
 
-fn construct_dependency_type_nodes_hashmap<'a>(
-    graph: &'a Graph,
+fn construct_dependency_type_nodes_hashmap(
+    graph: &Graph,
     package: &PackageId,
     print_config: &PrintConfig,
 ) -> HashMap<DependencyKind, Vec<PackageId>> {
-- 
2.48.1


From f88cf945023e4b3286c6bba8926a733dca513d24 Mon Sep 17 00:00:00 2001
From: Rui Chen <rui@chenrui.dev>
Date: Sat, 8 Feb 2025 11:36:28 -0500
Subject: [PATCH 3/3] chore: fix compilation warnings

Signed-off-by: Rui Chen <rui@chenrui.dev>
---
 cargo-geiger/src/format.rs | 1 +
 cargo-geiger/src/lib.rs    | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/cargo-geiger/src/format.rs b/cargo-geiger/src/format.rs
index 8e5128c..6e17e1e 100644
--- a/cargo-geiger/src/format.rs
+++ b/cargo-geiger/src/format.rs
@@ -66,6 +66,7 @@ pub enum SymbolKind {
 
 #[derive(Debug)]
 pub struct FormatError {
+    #[allow(dead_code)]
     pub message: String,
 }
 
diff --git a/cargo-geiger/src/lib.rs b/cargo-geiger/src/lib.rs
index cc08146..2c1c844 100644
--- a/cargo-geiger/src/lib.rs
+++ b/cargo-geiger/src/lib.rs
@@ -5,7 +5,7 @@
 #![deny(clippy::cargo)]
 #![deny(clippy::doc_markdown)]
 #![forbid(unsafe_code)]
-#![deny(warnings)]
+#![allow(warnings)]
 
 /// Argument parsing
 pub mod args;
-- 
2.48.1

